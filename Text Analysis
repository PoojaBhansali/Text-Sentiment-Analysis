#create a function to clean the tweets
all_stopwords = stopwords.words('english')

def cleanText(text):
    text = re.sub('@[A-Za-z0-9]+', '',text) #Remooving @ mentions
    text = re.sub('#', '',text) #removing #tag
    text = re.sub('RT[\s]+', '',text) #remove RT
    text = re.sub('https?:\/\/\S+', '', text) # Removing hyperlink
    return text

dataset_coworking['Cleaned_Tweets'] = dataset_coworking['title'].apply(cleanText)

# Create a function to get the subjectivity
def getSubjectivity(text):
    return TextBlob(text).sentiment.subjectivity

# Create a function to get the polarity
def getPolarity(text):
    return TextBlob(text).sentiment.polarity

# Create two new columns 'Subjectivity' & 'Polarity'
dataset_coworking['Subjectivity'] = dataset_coworking['Cleaned_Tweets'].apply(getSubjectivity)
dataset_coworking['Polarity'] = dataset_coworking['Cleaned_Tweets'].apply(getPolarity)

# word cloud visualization
allWords = ' '.join([twts for twts in dataset_coworking['Cleaned_Tweets']])
wordCloud = WordCloud(width=800, height=500, random_state=21, max_font_size=110).generate(allWords)

plt.figure(figsize=(10, 7))
plt.imshow(wordCloud, interpolation="bilinear")
plt.axis('off')
plt.show()

# Create a function to compute negative (-1), neutral (0) and positive (+1) analysis

def getAnalysis(score):
    if score < 0:
        return 'Negative'
    elif score == 0:
        return 'Neutral'
    else:
        return 'Positive'
    
dataset_coworking['Analysis'] = dataset_coworking['Polarity'].apply(getAnalysis)

# # Plotting 
# plt.figure(figsize=(8,6)) 
# for i in range(0, dataset_coworking.shape[0]):
#   plt.scatter(dataset_coworking["Polarity"][i], 
#               dataset_coworking["Subjectivity"][i], color='Blue') 

# # plt.scatter(x,y,color)   
# plt.title('Sentiment Analysis')
# plt.xlabel('Polarity') 
# plt.ylabel('Subjectivity') 
# plt.show()

# Plotting and visualizing the counts
plt.title('Sentiment Analysis')
plt.xlabel('Sentiment')
plt.ylabel('Counts')
# plt.xticks(rotation = 180)
dataset_coworking['Analysis'].value_counts().plot(kind = 'bar')
plt.show()
